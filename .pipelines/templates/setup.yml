jobs:
  - job: setup_workspace
    displayName: Setup Workspace

    variables:
      - group: aml-deployment-templates

      - name: resource_group_name
        value: $(environment)-$(namespace)-rg

      - name: ml_workspace_name
        value: mlw$(environment)$(namespace)

      - name: storage_name
        value: str$(environment)$(namespace)

      - name: aks_name
        value: aks$(environment)$(namespace)

      - name: compute_cluster_name
        value: cpu-cluster

      - name: aks_cluster_name
        value: aks-cluster

    steps:
      - task: AzureCLI@2
        displayName: Install Azure ML CLI
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: az extension add -n azure-cli-ml

      - task: AzureCLI@2
        displayName: Attach Workspace
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: |
            az ml folder attach \
            --workspace-name $(ml_workspace_name) \
            --resource-group $(resource_group_name)

      - task: AzureCLI@2
        displayName: Attach AKS Cluster
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: |
            export SUBSCRIPTION_ID=$(az account show | jq ".id" --raw-output)

            az ml computetarget attach aks \
            --compute-resource-id /subscriptions/$SUBSCRIPTION_ID/resourcegroups/$(resource_group_name)/providers/Microsoft.ContainerService/managedClusters/$(aks_name) \
            --name $(aks_cluster_name)

      - task: AzureCLI@2
        displayName: Attach AML Compute
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: |
            az ml computetarget create amlcompute \
            --name $(compute_cluster_name) \
            --vm-size Standard_DS2_v2 \
            --max-nodes 2

      - task: AzureCLI@2
        displayName: Register Tabular Dataset
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: |
            az ml dataset register --file data/tabular-dataset-spec.json --skip-validation

      - task: AzureCLI@2
        displayName: Create Datastores
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: |
            set -e

            # export CONNECTION_STRING=$(az storage account show-connection-string --name $(storage_name) --resource-group $(resource_group_name) | jq ".connectionString" --raw-output)

            az storage container create --name batch-score-input --account-name $(storage_name) --resource-group $(resource_group_name) # --connection-string $CONNECTION_STRING
            az storage container create --name batch-score-output --account-name $(storage_name) --resource-group $(resource_group_name) # --connection-string $CONNECTION_STRING

            az ml datastore attach-blob --account-name $(storage_name) --container-name batch-score-input --name batch_score_input
            az ml datastore attach-blob --account-name $(storage_name) --container-name batch-score-output  --name batch_score_output

      - task: AzureCLI@2
        displayName: Register File Dataset
        inputs:
          scriptType: bash
          azureSubscription: $(service_connection)
          scriptLocation: inlineScript
          inlineScript: |
            az ml dataset register --file data/file-dataset-spec.json --skip-validation
